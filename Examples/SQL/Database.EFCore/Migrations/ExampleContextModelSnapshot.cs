// <auto-generated />
using System;
using Database.EFCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Database.EFCore.Migrations
{
    [DbContext(typeof(ExampleContext))]
    partial class ExampleContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Database.EFCore.Entities.CurrencyEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Currency");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "RUB"
                        },
                        new
                        {
                            Id = 2,
                            Name = "EUR"
                        },
                        new
                        {
                            Id = 3,
                            Name = "USD"
                        });
                });

            modelBuilder.Entity("Database.EFCore.Entities.ExchangeRateEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Rate");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CurrencyId = 1,
                            Date = new DateTime(2020, 11, 24, 15, 5, 45, 0, DateTimeKind.Unspecified),
                            Value = 1.0
                        },
                        new
                        {
                            Id = 2,
                            CurrencyId = 2,
                            Date = new DateTime(2020, 11, 24, 16, 10, 34, 0, DateTimeKind.Unspecified),
                            Value = 95.0
                        },
                        new
                        {
                            Id = 3,
                            CurrencyId = 3,
                            Date = new DateTime(2020, 11, 24, 16, 10, 35, 0, DateTimeKind.Unspecified),
                            Value = 80.0
                        });
                });

            modelBuilder.Entity("Database.EFCore.Entities.SummaryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Summary");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "Freezing"
                        },
                        new
                        {
                            Id = 2,
                            Code = "Bracing"
                        },
                        new
                        {
                            Id = 3,
                            Code = "Chilly"
                        },
                        new
                        {
                            Id = 4,
                            Code = "Cool"
                        },
                        new
                        {
                            Id = 5,
                            Code = "Mild"
                        },
                        new
                        {
                            Id = 6,
                            Code = "Warm"
                        },
                        new
                        {
                            Id = 7,
                            Code = "Balmy"
                        },
                        new
                        {
                            Id = 8,
                            Code = "Hot"
                        },
                        new
                        {
                            Id = 9,
                            Code = "Sweltering"
                        },
                        new
                        {
                            Id = 10,
                            Code = "Scorching"
                        });
                });

            modelBuilder.Entity("Database.EFCore.Entities.WeatherEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("SummaryId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Temperature")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("SummaryId");

                    b.ToTable("Weather");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SummaryId = 3,
                            Temperature = -1.3m,
                            TimeStamp = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            SummaryId = 5,
                            Temperature = 5.1m,
                            TimeStamp = new DateTime(2020, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            SummaryId = 1,
                            Temperature = -10m,
                            TimeStamp = new DateTime(2020, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Database.EFCore.Entities.ExchangeRateEntity", b =>
                {
                    b.HasOne("Database.EFCore.Entities.CurrencyEntity", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");
                });

            modelBuilder.Entity("Database.EFCore.Entities.WeatherEntity", b =>
                {
                    b.HasOne("Database.EFCore.Entities.SummaryEntity", "Summary")
                        .WithMany()
                        .HasForeignKey("SummaryId");
                });
#pragma warning restore 612, 618
        }
    }
}
